==============================================================================
               I N S T A L L A T I O N   I N S T R U C T I O N S
==============================================================================

This document describes how to build and install sipXezPhone from source.  This
process is somewhat complicated and requires a number of 3rd party software
packages and manual steps.

If you have questions or problems, please consult the latest version of this
document and the sipX dev mailing list.  The sipX-dev mailing list is searchable -
please search before posting your question.

  http://scm.sipfoundry.org/rep/sipX/main/sipXcallLib/examples/sipXezPhone/INSTALL
  http://www.sipfoundry.org/sipXcallLib/
  http://list.sipfoundry.org/mailman/listinfo/sipx-dev

Contents:

  Windows instructions
    Getting the source code
    Installing 3rd party components
    Building C++ code
    Updating environment variables
    Launching the softphone
        Troubleshooting: Build problems
  Linux instructions
  Please help!

====================
Windows instructions
====================

The sipXezPhone depends on other SIPFoundry projects:
sipXportLib, sipXtackLib, sipXmediaLib, and sipXcallLib.
For more information, please see the build and install documentation
for those projects.
The top-level sipXezPhone.sln will configure and build all of the dependant
projects.

-------------------------------
Getting the Source Code
-------------------------------
Make a new directory which will be home to your SIPFoundry projects.

For example, create a "c:\sipfoundry" directory.

Using subversion from the command line, get the needed SIPFoundry projects
by running the following from the command line.
For example:
  cd \sipfoundry
  svn checkout http://scm.sipfoundry.org/rep/sipX/main/sipXportLib sipXportLib
  svn checkout http://scm.sipfoundry.org/rep/sipX/main/sipXtackLib sipXtackLib
  svn checkout http://scm.sipfoundry.org/rep/sipX/main/sipXmediaLib sipXmediaLib
  svn checkout http://scm.sipfoundry.org/rep/sipX/main/sipXcallLib sipXcallLib
  
  The sipXezPhone code and the Visual Studio project files are located in the "sipXcallLib\examples\sipXezPhone" directory.


-------------------------------
Installing 3rd party components
-------------------------------

Required Software
-----------------
MSVC    - Microsoft Visual Studio.NET 2003.
          (or greater).
GLib2   - Low-level core library that forms the basis of GTK+ and GNOME
PCRE    - Perl Compatible Regular Expression Library
wxWidgets - Open-source, platform independent GUI library


Installing Glib2
----------------
Latest tested version: 2.4.7

You will need the following glib packages/files:
  glib-2.4.7.zip : glib runtime environment
  glib-dev-2.4.7.zip : glib developer package
  libiconv-1.9.1.bin.woe32.zip : GNU libiconv
  gettext-runtime-0.13.1.zip : GNU gettext runtime for Win32

You can obtain these from Tor Lillqvist (maintains the Windows port of
GLIB/GTK+) by pointing your browser at:
   http://www.gimp.org/~tml/gimp/win32/downloads.html

Alternatively, you can download these files from SIPfoundry:
  http://www.sipfoundry.org/pub/sipXphone/depends/win32/

Using your favorite archive utility, extract the contents of each file into
a new glib directory (e.g. "C:\glib").

Next add the glib paths to your MSVC environment (assuming installation into
C:\glib):

Additional "Include files":
   C:\glib\include\glib-2.0
   C:\glib\lib\glib-2.0\include

Additional "Library files":
   C:\glib\lib

In MSVC, select "Options" from the "Tools" menu, select the "Projects"
folder, select "VC++ Directories", and then select either "Include files" or
"Library files" from the right-aligned dropdown list.

Installing PCRE
---------------
Latest tested version: 4.4

You will need the following PCRE packages/files:
  pcre-4.4-bin.exe : PCRE runtime environment
  pcre-4.4-lib.exe : PCRE development package

You can download the directly from gnuwin32 or from SIPfoundry:
  http://gnuwin32.sourceforge.net/packages/pcre.htm
  http://www.sipfoundry.org/pub/sipXphone/depends/win32/

Install both packages.  Order may not matter, however, installating the runtime
environment first is known to work.

Next add the PCRE  paths to your MSVC environment (assuming installation into
C:\Program Files\GnuWin32):

Additional "Include files":
   C:\Program Files\GnuWin32\include

Additional "Library files":
   C:\Program Files\GnuWin32\lib

See "Installing Glib2" for hints on adding include and library paths.

Installing wxWidgets
--------------------
The wxWidgets library can be downloaded from http://www.wxwidgets.org/.
sipXezPhone uses version 2.4.2 of wxWidgets.

By default, the wxWidgets' setup.exe installs the libraries in the
\wxWindows-2.4.2 folder.

NOTE - there is one important post-installation step for installing wxWidgets:
       copy setup.h from \wxWindows-2.4.2\include\wx\msw
                      to \wxWindows-2.4.2\include\wx
                      
Building wxWigets
-----------------
Using Visual Studio open up the C:\wxWindows-2.4.2\src\wxWindows.dsw workspace.
Using the Batch Build feature build all projects in the workspace.

-----------------
Building C++ Code
-----------------

Open "sipXezPhone.sln" in MSVC, verify that "sipXezPhone" is the default project
and build.  You should end up building "sipXezPhone.exe", "sipXtapi.dll" and the dependent .libs.

NOTE - there is currently and issue where the projects in the sipXezPhone solution may attempt to build in the
WRONG order!!  If this happens, just build (dont re-build) a second time.  The second pass should build attempt should
succeed.


----------------------------
Adding Environment Variables
----------------------------

At runtime, the softphone needs to be able to find the libglib-2.0-o.dll, and
related dependencies.  Add "c:\glib\bin", or the equivalent to your Windows
PATH environment variable.  From a command prompt, this can be added by
entering the following:
  PATH=%PATH%;c:\glib\bin

-----------------------
Launching the sipXezPhone
-----------------------

After a build, sipXezPhone.exe will be created in the sipXcallLib\examples\sipXezPhone directory.
The working directory for sipXezPhone must have in it the sipXtapi.dll.  Either copy the sipXtapi.dll to
the directory containing sipXezPhone.exe, or point your working directory to sipXtapi's build directory.



-------------------------------
Troubleshooting: Build Problems
-------------------------------

error C2955: 'allocator' : use of class template requires template ...
----------------------------------------------------------------------
There seems to be a naming conflict between GLIB and and MSVC 6 (may also
exist for 7.x).  If you run into this problem, please change the 4 GLIB
references of "allocator" to something different.

For example, change

  "void g_node_push_allocator(GAllocator *allocator);"

to

  "void g_node_push_allocator(GAllocator *allocatorX);"

If using GLIB 2.4.7, you will need to modify these references:
...\glib\include\glib-2.0\glib\gmem.h - line 164
...\glib\include\glib-2.0\glib\glist.h - line 45
...\glib\include\glib-2.0\glib\gslist.h - line 44
...\glib\include\glib-2.0\glib\gnode.h - line 77


RTTI must be enabled
--------------------
Many of the projects are starting to use the dynamic_cast<>()  mechanism to
provide runtime type checking.  RTTI must be enabled on all projects using
dynamic_cast<>() and related functionality.  By default, almost all of the
sipX WIN32 projects now enable RTTI.

Failing to enable RTTI results in odd crashes/exceptions.  Generally "rtti"
or "RTDynamicCast" is found in stack trace.

wxWidgets Unresolved Externals and MSVC 6.0
--------------------------------------------
If your wxWidgets library was not compiled with the /MT compile flag (multi-threaded),
may experience 'unresoved external' link errors such as:

unresolved external symbol __ftol2

Rebuild wxWidgets with the following command lines
 nmake -f makefile.vc clean FINAL=1
 nmake -f makefile.vc FINAL=1 CRTFLAG=/MD    (for the multithreaded DLL)


 
-------------------------------
Troubleshooting: Runtime Problems
-------------------------------

A STATUS_DLL_NOT_FOUND failure at start-up can be caused
if the application cannot find sipXtapi.dll or sipXtapid.dll (for debug).

You can:
1.  Set the working directory of sipXezPhone to the folder containing the 
    sipXtapi.dll or sipXtapid.dll.
2.  Copy the sipXtapi.dll or sipXtapid.dll to the same folder as the sipXezPhone.exe
3.  Add the folder containing sipXtapid.dll and/or sipXtapi.dll to your path.

==================
Linux instructions
==================

[Coming soon.]

As usual, run "autoreconf --install --force" and "./configure" in the
sipXcallLib directory.

Then, in this directory, run "make".


============
Please help!
============

Find a problem in these docs?  Have suggestions ... better yet a patch with
changes?  Please email sipX-dev AT sipfoundry.org or mcohen AT pingtel.com.
